% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/performance_eval_auto.R
\name{performance_eval_auto}
\alias{performance_eval_auto}
\title{performance_eval_auto}
\usage{
performance_eval_auto(
  data_var,
  list_index,
  ref,
  conf.level = 0.95,
  index_names = NULL,
  labels = "Test",
  forest_plot = TRUE,
  table_output = TRUE,
  file_name = "performance_eval",
  data_long = FALSE,
  group_var = NULL
)
}
\arguments{
\item{data_var}{Data table containing tests results}

\item{list_index}{A list of index tests with "Negative" and "Positive" results. If the data is in long format, the name of the column where the results are stored.}

\item{ref}{The reference test with "Negative" and "Positive" results}

\item{conf.level}{The confidence level, 1-alpha â€“ default 95\%}

\item{index_names}{An optional list containing names of the index tests. Not used with long data format.}

\item{labels}{An optional text for the axis labels in forest plots.}

\item{forest_plot}{Should the forest plots be generated? Default TRUE}

\item{table_output}{Should a table output be generated? Default TRUE}

\item{file_name}{An optional text for the file name that will be available for download when the table output is generated}

\item{data_long}{Is the data in the long format? Default FALSE}

\item{group_var}{The variable name where the groups are defined. Enter without quotation marks (e.g. ColName instead of "ColName"). Not used with wide data format.}
}
\value{
performance evaluation resuls as plots, formatted table, or simple data frame
}
\description{
Calculates diagnostic accuracy characteristics and generates report quality tables and figures. Executes multi_sen_spe_out_forest, multi_sen_spe_dt_out, and returns a list object with two forest plots and a DT data table for display.The function works with wide and long formats.
}
\examples{
df <- data.frame(Index1 = c(rep("Positive", 20), rep("Negative", 20)), Index2 = c(rep("Positive", 5), rep("Negative", 35)), Index3 = c(rep("Positive", 9), rep("Negative", 31)), Reference = c(rep("Positive", 10), rep("Negative", 30)))
eval_output <- performance_eval_auto(data_var = df, list_index = c("Index1", "Index2", "Index3"), ref = "Reference", conf.level = 0.95, index_names = c("Tgs1", "AFD", "SimpleDx"), labels = "Test", forest_plot = TRUE, table_output = TRUE, file_name = "MyEvaluationExample")
eval_output$sen_plot
eval_output$spe_plot
eval_output$table

eval_output_only_forest <- performance_eval_auto(data_var = df, list_index = c("Index1", "Index2", "Index3"), ref = "Reference", conf.level = 0.95, index_names = c("Tgs1", "AFD", "SimpleDx"), labels = "Test", forest_plot = TRUE, table_output = FALSE)
eval_output_only_forest$sen_plot
eval_output_only_forest$spe_plot
eval_output_only_forest$table #NULL

eval_output_simple_df <- performance_eval_auto(data_var = df, list_index = c("Index1", "Index2", "Index3"), ref = "Reference", conf.level = 0.95, index_names = c("Tgs1", "AFD", "SimpleDx"), labels = "Test", forest_plot = FALSE, table_output = FALSE)

eval_output_simple_df


data(my_dataset)
head(my_dataset)
eval_output <- performance_eval_auto(data_var = my_dataset, list_index = "Result", ref = "RefTest", conf.level = 0.95, labels = "Test", forest_plot = FALSE, table_output = TRUE, file_name = "MyEvaluationExample", data_long = TRUE, group_var = Test_Name )

}
