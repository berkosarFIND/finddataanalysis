[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Berra Erkosar Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/composite_reference.html","id":"composite-reference","dir":"Articles","previous_headings":"","what":"Composite reference","title":"composite_reference","text":"","code":"df <- data.frame(T1 = c(rep(\"Positive\", 10), rep(\"Negative\", 10), rep(\"Negative\", 10)), T2 = c(rep(\"Positive\", 10), rep(\"Positive\", 10), rep(\"Negative\", 10))) composite_reference(ref_1 = \"T1\", ref_2 = \"T2\", ref_3 = NULL, data_frame = df) #>          T1       T2    T1_T2 #> 1  Positive Positive Positive #> 2  Positive Positive Positive #> 3  Positive Positive Positive #> 4  Positive Positive Positive #> 5  Positive Positive Positive #> 6  Positive Positive Positive #> 7  Positive Positive Positive #> 8  Positive Positive Positive #> 9  Positive Positive Positive #> 10 Positive Positive Positive #> 11 Negative Positive Positive #> 12 Negative Positive Positive #> 13 Negative Positive Positive #> 14 Negative Positive Positive #> 15 Negative Positive Positive #> 16 Negative Positive Positive #> 17 Negative Positive Positive #> 18 Negative Positive Positive #> 19 Negative Positive Positive #> 20 Negative Positive Positive #> 21 Negative Negative Negative #> 22 Negative Negative Negative #> 23 Negative Negative Negative #> 24 Negative Negative Negative #> 25 Negative Negative Negative #> 26 Negative Negative Negative #> 27 Negative Negative Negative #> 28 Negative Negative Negative #> 29 Negative Negative Negative #> 30 Negative Negative Negative"},{"path":"/articles/composite_reference.html","id":"categorise-test-result-based-on-a-threhold","dir":"Articles","previous_headings":"Composite reference","what":"Categorise test result based on a threhold","title":"composite_reference","text":"","code":"df <- data.frame(results = c(sample(1:100, 50, replace=TRUE))) categorize_result(dataframe = df, variable = \"results\", thresholds = 50) #>    results Result50 #> 1       45 Negative #> 2       23 Negative #> 3       76 Positive #> 4       63 Positive #> 5       47 Negative #> 6       31 Negative #> 7       68 Positive #> 8       73 Positive #> 9       69 Positive #> 10       5 Negative #> 11      24 Negative #> 12      79 Positive #> 13      77 Positive #> 14       2 Negative #> 15      62 Positive #> 16      55 Positive #> 17      43 Negative #> 18      62 Positive #> 19      43 Negative #> 20       5 Negative #> 21      85 Positive #> 22      44 Negative #> 23      61 Positive #> 24      34 Negative #> 25      70 Positive #> 26      63 Positive #> 27       4 Negative #> 28      34 Negative #> 29      35 Negative #> 30      89 Positive #> 31      86 Positive #> 32      43 Negative #> 33       7 Negative #> 34      32 Negative #> 35      53 Positive #> 36      70 Positive #> 37       9 Negative #> 38      22 Negative #> 39      10 Negative #> 40      32 Negative #> 41      34 Negative #> 42      17 Negative #> 43      52 Positive #> 44      56 Positive #> 45      22 Negative #> 46      95 Positive #> 47       1 Negative #> 48      70 Positive #> 49      34 Negative #> 50      51 Positive"},{"path":[]},{"path":"/articles/composite_reference.html","id":"composite-reference-for-roc","dir":"Articles","previous_headings":"Composite reference","what":"Composite Reference for ROC","title":"composite_reference","text":"Generates composite references based 2/3 variables, one tested multiple thresholds.","code":""},{"path":"/articles/composite_reference.html","id":"calculate-roc-like-characteristics","dir":"Articles","previous_headings":"Composite reference","what":"Calculate ROC-like characteristics","title":"composite_reference","text":"function can used monitor sensitivity specificity RDT comparison reference value classified based multiple thresholds. useful case composite reference generated based multiple tests one test results needs classified positive negative. index test classification affected.","code":""},{"path":"/articles/composite_reference.html","id":"composite_reference_majority","dir":"Articles","previous_headings":"Composite reference","what":"composite_reference_majority","title":"composite_reference","text":"","code":"df <- data.frame(T1 = c(rep(\"Positive\", 10), rep(\"Negative\", 10), rep(\"Negative\", 10)), T2 = c(rep(\"Positive\", 10), rep(\"Positive\", 10), rep(\"Negative\", 10)), T3 = c(rep(\"Negative\", 10), rep(\"Positive\", 10), rep(\"Negative\", 10))) composite_reference_majority(ref_1 = \"T1\", ref_2 = \"T2\", ref_3 = \"T3\", data_frame = df) #>          T1       T2       T3 MajorityRef #> 1  Positive Positive Negative    Positive #> 2  Positive Positive Negative    Positive #> 3  Positive Positive Negative    Positive #> 4  Positive Positive Negative    Positive #> 5  Positive Positive Negative    Positive #> 6  Positive Positive Negative    Positive #> 7  Positive Positive Negative    Positive #> 8  Positive Positive Negative    Positive #> 9  Positive Positive Negative    Positive #> 10 Positive Positive Negative    Positive #> 11 Negative Positive Positive    Positive #> 12 Negative Positive Positive    Positive #> 13 Negative Positive Positive    Positive #> 14 Negative Positive Positive    Positive #> 15 Negative Positive Positive    Positive #> 16 Negative Positive Positive    Positive #> 17 Negative Positive Positive    Positive #> 18 Negative Positive Positive    Positive #> 19 Negative Positive Positive    Positive #> 20 Negative Positive Positive    Positive #> 21 Negative Negative Negative    Negative #> 22 Negative Negative Negative    Negative #> 23 Negative Negative Negative    Negative #> 24 Negative Negative Negative    Negative #> 25 Negative Negative Negative    Negative #> 26 Negative Negative Negative    Negative #> 27 Negative Negative Negative    Negative #> 28 Negative Negative Negative    Negative #> 29 Negative Negative Negative    Negative #> 30 Negative Negative Negative    Negative"},{"path":"/articles/concordance.html","id":"cohen_agreement","dir":"Articles","previous_headings":"","what":"cohen_agreement","title":"Concordance","text":"","code":"df <- data.frame(Test1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Test2 = c(rep(\"Positive\", 30), rep(\"Negative\", 10))) cohen_agreement(data_var = df, var1 = \"Test1\", var2 = \"Test2\") #>   All Positive.n Test(+) Comp(-).n Test(-) Comp(+).n All Negative.n NPA #> 1             20                 0                10             10 100 #>   Lower bound 95% CI NPA Upper bound 95% CI NPA  PPA Lower bound 95% CI PPA #> 1                    100                    100 66.7                   49.8 #>   Upper bound 95% CI PPA Percentage of agreement Lower bound 95% CI Overall PA #> 1                   83.6                      75                          61.6 #>   Upper bound 95% CI Overall PA Cohen's Kappa #> 1                          88.4          0.50"},{"path":"/articles/concordance.html","id":"format-column-names-for-the-data-table-produced-by-cohen_agreement","dir":"Articles","previous_headings":"","what":"Format Column Names (for the data table produced by cohen_agreement)","title":"Concordance","text":"","code":"df <- data.frame(Test1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Test2 = c(rep(\"Positive\", 30), rep(\"Negative\", 10))) results <- cohen_agreement(data_var = df, var1 = \"Test1\", var2 = \"Test2\") print(results) #>   All Positive.n Test(+) Comp(-).n Test(-) Comp(+).n All Negative.n NPA #> 1             20                 0                10             10 100 #>   Lower bound 95% CI NPA Upper bound 95% CI NPA  PPA Lower bound 95% CI PPA #> 1                    100                    100 66.7                   49.8 #>   Upper bound 95% CI PPA Percentage of agreement Lower bound 95% CI Overall PA #> 1                   83.6                      75                          61.6 #>   Upper bound 95% CI Overall PA Cohen's Kappa #> 1                          88.4          0.50 format_colnames(data_frame = results, test1 = \"This Test\", test2 = \"The Other Test\") #>   All Positive This Test(+) The Other Test(-) This Test(-) The Other Test(+) #> 1           20                              0                             10 #>   All Negative NPA Lower bound 95% CI NPA Upper bound 95% CI NPA  PPA #> 1           10 100                    100                    100 66.7 #>   Lower bound 95% CI PPA Upper bound 95% CI PPA Overall PA #> 1                   49.8                   83.6         75 #>   Lower bound 95% CI Overall PA Upper bound 95% CI Overall PA Cohen's Kappa #> 1                          61.6                          88.4          0.50"},{"path":"/articles/concordance.html","id":"group_means_concordence","dir":"Articles","previous_headings":"","what":"group_means_concordence","title":"Concordance","text":"","code":"df <- data.frame(Test1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Test2 = c(rep(\"Negative\", 5), rep(\"Positive\", 5), rep(\"Negative\", 30)), Test3 = c(rep(\"Positive\", 10), rep(\"Negative\", 25), rep(\"Positive\", 5)), MyVariable = sample(1:100, 40))   group_means_concordence(data_var = df, mean_var = \"MyVariable\", var1 = \"Test1\", var2 = \"Test2\", var3 = \"Test3\") #>        Groups     Mean    Stdev #> 1     All_pos 49.20000 29.98666 #> 2     All_neg 42.53333 29.97825 #> 3 v1P_v2N_v3N 60.30000 29.51478 #> 4 v1N_v2P_v3N      NaN       NA #> 5 v1N_v2N_v3P 64.60000 30.86746 #> 6 v1P_v2P_v3N      NaN       NA #> 7 v1N_v2P_v3P      NaN       NA #> 8 v1P_v2N_v3P 50.80000 20.02998"},{"path":"/articles/dx_yield.html","id":"dx_yield","dir":"Articles","previous_headings":"","what":"dx_yield","title":"dx_yield","text":"","code":"df_ex <- data.frame(REF = c(rep('Positive', 50), rep('Negative', 50)), INDEX = c(rep('Positive', 3), rep('Negative', 78), rep('Positive', 19)))  dx_yield(data_arg = df_ex, ref_arg = \"REF\", index_arg = \"INDEX\", conf.level = 0.95) #> [1] \"44.0 [31.2-57.7]\""},{"path":"/articles/performance-evaluation.html","id":"sens_spe_for_forest","dir":"Articles","previous_headings":"","what":"sens_spe_for_forest","title":"Performance Evaluation","text":"Calculates sensitivity specificity diagnostic test. Results formatted generate forest plots.","code":"library(forestplot) #> Loading required package: grid #> Loading required package: checkmate #> Loading required package: abind library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union df <- data.frame(Index = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Reference = c(rep(\"Positive\", 30), rep(\"Negative\", 10))) forest_data <- cbind(Test = \"Index\", sens_spe_for_forest(data_var = df, index = \"Index\", ref = \"Reference\", conf.level = 0.95)) forest_data %>% forestplot(mean = Sensitivity,                            lower = SensLower,                            upper = SensUpper,                            labeltext = Test,                           title = \"Sensitivity\",                           zero = NA,                           xticks = c( 0, 20, 40, 60, 80, 100),                           txt_gp = fpTxtGp(ticks=gpar(cex=1)),                           boxsize = .1                           )"},{"path":"/articles/performance-evaluation.html","id":"sens_spe","dir":"Articles","previous_headings":"","what":"sens_spe","title":"Performance Evaluation","text":"Calculates sensitivity specificity diagnostic test. Results formatted generate table display.","code":"df <- data.frame(Index = c(rep(\"Positive\", 5), rep(\"Negative\", 30), rep(\"Positive\", 5)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30))) sens_spe(data_var = df, index = \"Index\", ref = \"Reference\", conf.level = 0.95) #>    N TP FP FN TN Sensitivity Sensitivity [95%CI] Specificity #> 1 40  5  5  5 25          50       [23.66-76.34]       83.33 #>   Specificity [95%CI] Balanced Accuracy B. Accuracy [95%CI] DOR DOR [95%CI] PPV #> 1       [66.44-92.66]             66.66        [45.05-84.5]   5 [4.76-5.26]  50 #>     PPV [95%CI]   NPV   NPV [95%CI] Accuracy Accuracy [95%CI] #> 1 [23.66-76.34] 83.33 [66.44-92.66]       75    [59.81-85.81]"},{"path":"/articles/performance-evaluation.html","id":"ci_calc","dir":"Articles","previous_headings":"","what":"CI_Calc","title":"Performance Evaluation","text":"Calculates confidence interval given proportion normal approximation.","code":"CI_Calc(alpha=0.05, proportion=0.62, n= 500) #> [1] 0.0425"},{"path":"/articles/performance-evaluation.html","id":"multi_sen_spe","dir":"Articles","previous_headings":"","what":"multi_sen_spe","title":"Performance Evaluation","text":"create data frame shows performance characteristics multiple tests.","code":"library(finddataanalysis) df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))  multi_sen_spe(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"a\", \"b\", \"c\")) #>    N TP FP FN TN Sensitivity Sensitivity [95%CI] Specificity #> a 40 10 10  0 20         100       [72.25-100.0]       66.67 #> b 40  5  0  5 30          50       [23.66-76.34]         100 #> c 40  9  0  1 30          90       [59.58-98.21]         100 #>   Specificity [95%CI] Balanced Accuracy B. Accuracy [95%CI] DOR DOR [95%CI] PPV #> a       [48.78-80.77]             83.34       [60.52-90.38] Inf   [NaN-Inf]  50 #> b       [88.65-100.0]                75       [56.15-88.17] Inf   [NaN-Inf] 100 #> c       [88.65-100.0]                95        [74.11-99.1] Inf   [NaN-Inf] 100 #>     PPV [95%CI]   NPV   NPV [95%CI] Accuracy Accuracy [95%CI] #> a [29.93-70.07]   100 [83.89-100.0]       75    [59.81-85.81] #> b [56.55-100.0] 85.71 [70.62-93.74]     87.5    [73.89-94.54] #> c [70.09-100.0] 96.77 [83.81-99.43]     97.5    [87.12-99.56]"},{"path":"/articles/performance-evaluation.html","id":"multi_sen_spe_forest","dir":"Articles","previous_headings":"","what":"multi_sen_spe_forest","title":"Performance Evaluation","text":"create data frame forest plot friendly multiple index tests","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))  multi_sen_spe_forest(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"ate\",\"FNDH\", \"DXCb\")) #>    N TP FP FN TN Sensitivity Specificity SensLower SensUpper SpeLower SpeUpper #> 1 40 10 10  0 20         100       66.67     72.25    100.00    48.78    80.77 #> 2 40  5  0  5 30          50      100.00     23.66     76.34    88.65   100.00 #> 3 40  9  0  1 30          90      100.00     59.58     98.21    88.65   100.00 #>   Balanced_Accuracy BAlower BAupper DOR DORUpper DORLower PPV PPVLower PPVUpper #> 1             83.34   60.52   90.38 Inf      Inf      NaN  50    29.93    70.07 #> 2             75.00   56.15   88.17 Inf      Inf      NaN 100    56.55   100.00 #> 3             95.00   74.11   99.10 Inf      Inf      NaN 100    70.09   100.00 #>      NPV NPVLower NPVUpper Accuracy ACCLower ACCUpper Test #> 1 100.00    83.89   100.00     75.0    59.81    85.81  ate #> 2  85.71    70.62    93.74     87.5    73.89    94.54 FNDH #> 3  96.77    83.81    99.43     97.5    87.12    99.56 DXCb"},{"path":"/articles/performance-evaluation.html","id":"multi_sen_spe_dt_out","dir":"Articles","previous_headings":"","what":"multi_sen_spe_dt_out","title":"Performance Evaluation","text":"Calculate performance characteristics generate nice table output.","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))   multi_sen_spe_dt_out(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, file_name = \"ZX001_performance\", index_names = c(\"a\", \"b\", \"c\"))"},{"path":"/articles/performance-evaluation.html","id":"multi_sen_spe_out_forest","dir":"Articles","previous_headings":"","what":"multi_sen_spe_out_forest","title":"Performance Evaluation","text":"Calculate performance characteristics generate nice forestplots.","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30))) plots <- multi_sen_spe_out_forest(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, labels = \"Index Tests\", index_names = c(\"a\", \"b\", \"c\")) plots[[1]] plots[[2]]"},{"path":"/articles/performance-evaluation.html","id":"performance_eval_auto","dir":"Articles","previous_headings":"","what":"performance_eval_auto","title":"Performance Evaluation","text":"Executes automatized analysis performance evaluation. function calculates sensitivity, specificity, balanced accuracy, diagnostic odds ratio, negative positive predictive values. generates downloadable tables interactive graphs based parameters entered. also options get simple, unformatted version table containing result. long data, grouping variable needs defined. column name feeds dplyr later , entered without quotation marks. wide data column names containing index tests entered list. reference always separate column.","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))  # All outputs eval_output <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = TRUE, table_output = TRUE, file_name = \"MyEvaluationExample\") eval_output$sen_plot eval_output$spe_plot eval_output$table # Forest plot outputs eval_output_only_forest <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = TRUE, table_output = FALSE) eval_output_only_forest$sen_plot eval_output_only_forest$spe_plot eval_output_only_forest$table #NULL #> NULL  # A simple data frame output where the table is not formatted. This form is computer friendly. eval_output_simple_df <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = FALSE, table_output = FALSE)  eval_output_simple_df #>    N TP FP FN TN Sensitivity Specificity SensLower SensUpper SpeLower SpeUpper #> 1 40 10 10  0 20         100       66.67     72.25    100.00    48.78    80.77 #> 2 40  5  0  5 30          50      100.00     23.66     76.34    88.65   100.00 #> 3 40  9  0  1 30          90      100.00     59.58     98.21    88.65   100.00 #>   Balanced_Accuracy BAlower BAupper DOR DORUpper DORLower PPV PPVLower PPVUpper #> 1             83.34   60.52   90.38 Inf      Inf      NaN  50    29.93    70.07 #> 2             75.00   56.15   88.17 Inf      Inf      NaN 100    56.55   100.00 #> 3             95.00   74.11   99.10 Inf      Inf      NaN 100    70.09   100.00 #>      NPV NPVLower NPVUpper Accuracy ACCLower ACCUpper     Test #> 1 100.00    83.89   100.00     75.0    59.81    85.81     Tgs1 #> 2  85.71    70.62    93.74     87.5    73.89    94.54      AFD #> 3  96.77    83.81    99.43     97.5    87.12    99.56 SimpleDx   # Performance Evaluation by Groups data(my_dataset) head(my_dataset) #>         ID Test_Name   Result  RefTest #> 1 01STUDID       ABC Negative Negative #> 2 01STUDID       DST Negative Negative #> 3 01STUDID       HCG Negative Negative #> 4 01STUDID      LLJK Negative Negative #> 5 01STUDID      ddfs Negative Negative #> 6 01STUDID Weird Lab Negative Negative eval_output <- performance_eval_auto(data_var = my_dataset, list_index = \"Result\", ref = \"RefTest\", conf.level = 0.95, labels = \"Test\", forest_plot = FALSE, table_output = TRUE, file_name = \"MyEvaluationExample\", data_long = TRUE, group_var = Test_Name )"},{"path":"/articles/performance-evaluation.html","id":"compare_sen_spe","dir":"Articles","previous_headings":"","what":"compare_sen_spe","title":"Performance Evaluation","text":"Comparison sensitivities specificities two independent (.e. unpaired) groups.","code":"result.df <- data.frame(Tests = c(\"Test1\", \"Test2\"), TP = c(82, 140), FN = c(18, 60)) result.df$N <- result.df$TP +result.df$FN result.df$sen <- result.df$TP/result.df$N compare_sen_spe(s1 = result.df$sen[1], s2 = result.df$sen[2], n1 = result.df$N[1], n2 = result.df$N[2],two.sided = TRUE) #>   Statistic       Value #> 1         Z -2.38761651 #> 2         P  0.01695803"},{"path":"/articles/performance-evaluation.html","id":"nice_table","dir":"Articles","previous_headings":"","what":"nice_table","title":"Performance Evaluation","text":"","code":"library(dplyr) df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)), Sex = rep(c(\"M\",\"F\", \"F\", \"M\"), 10))  sex_ana <- df %>% group_by(Sex) %>% group_modify(~ performance_eval_auto(   data_var = (.x),   list_index =c(\"Index1\", \"Index2\"),   ref = \"Reference\",   conf.level = 0.95,   index_names = NULL,   labels = \"Test\",   forest_plot = FALSE, #!!!   table_output = FALSE, #!!!   file_name = \"performance_eval\",   data_long = FALSE, #!!!   group_var = NULL )) nice_table(sex_ana, \"Sex\")"},{"path":"/articles/variablemanipulations.html","id":"temperature_groups","dir":"Articles","previous_headings":"","what":"temperature_groups","title":"variablemanipulations","text":"","code":"df = data.frame(ID = c(1:20), Temperature = runif(20, 36, 42)) temperature_groups(data.var = df, temperature = \"Temperature\") #>    ID Temperature TEMP_CATEG #> 1   1    36.48450    36-36.9 #> 2   2    41.00600        ≥39 #> 3   3    39.60457        ≥39 #> 4   4    36.94325    36-36.9 #> 5   5    36.04440    36-36.9 #> 6   6    38.79836    38-38.9 #> 7   7    38.98666    38-38.9 #> 8   8    37.73860    37-37.9 #> 9   9    40.39729        ≥39 #> 10 10    40.63513        ≥39 #> 11 11    41.24760        ≥39 #> 12 12    37.04964    37-37.9 #> 13 13    36.20545    36-36.9 #> 14 14    37.92231    37-37.9 #> 15 15    38.41397    38-38.9 #> 16 16    37.17402    37-37.9 #> 17 17    38.42123    38-38.9 #> 18 18    36.38197    36-36.9 #> 19 19    38.33221    38-38.9 #> 20 20    41.85329        ≥39"},{"path":"/articles/variablemanipulations.html","id":"age_groups","dir":"Articles","previous_headings":"","what":"age_groups","title":"variablemanipulations","text":"","code":"df = data.frame(ID = c(1:20), age = round(runif(20, 3, 86))) age_groups(data.var = df, age = \"age\", lim1=5, lim2=11, lim3=18, lim4=45, lim5=60) #>    ID age AGE_CATEG #> 1   1  27     18-44 #> 2   2  59     45-59 #> 3   3  64       ≥60 #> 4   4  19     18-44 #> 5   5  84       ≥60 #> 6   6  65       ≥60 #> 7   7   7      5-10 #> 8   8  47     45-59 #> 9   9  61       ≥60 #> 10 10  60       ≥60 #> 11 11   6      5-10 #> 12 12  22     18-44 #> 13 13  28     18-44 #> 14 14  56     45-59 #> 15 15  43     18-44 #> 16 16  39     18-44 #> 17 17  62       ≥60 #> 18 18  82       ≥60 #> 19 19  18     18-44 #> 20 20  21     18-44 df = data.frame(ID = c(1:20), AGE = round(runif(20, 3, 25))) age_groups(data.var = df, age = \"AGE\", lim1=5, lim2=11, lim3=18) #>    ID AGE AGE_CATEG #> 1   1  18       ≥18 #> 2   2  14     11-17 #> 3   3  17     11-17 #> 4   4  18       ≥18 #> 5   5   5      5-10 #> 6   6  20       ≥18 #> 7   7  20       ≥18 #> 8   8  25       ≥18 #> 9   9  24       ≥18 #> 10 10  12     11-17 #> 11 11  13     11-17 #> 12 12  10      5-10 #> 13 13   7      5-10 #> 14 14  15     11-17 #> 15 15  14     11-17 #> 16 16  20       ≥18 #> 17 17   7      5-10 #> 18 18  19       ≥18 #> 19 19   4        <5 #> 20 20  11     11-17"},{"path":"/articles/variablemanipulations.html","id":"age_dob_process","dir":"Articles","previous_headings":"","what":"age_dob_process","title":"variablemanipulations","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: 'lubridate' #> The following objects are masked from 'package:base': #>  #>     date, intersect, setdiff, union   my_data <- data.frame(   ID = c(1, 2, 3, 4, 5),   age = c(25, NA, 30, NA, NA),   dob = c(\"1980-01-15\", \"1995-03-22\", \"1975-08-10\", \"1988-11-05\", \"2000-09-30\"),   date_enrollment = c(\"2023-05-10\", \"2022-12-01\", \"2022-02-18\", \"2023-02-05\", \"2021-07-20\") )  # Display the data print(my_data) #>   ID age        dob date_enrollment #> 1  1  25 1980-01-15      2023-05-10 #> 2  2  NA 1995-03-22      2022-12-01 #> 3  3  30 1975-08-10      2022-02-18 #> 4  4  NA 1988-11-05      2023-02-05 #> 5  5  NA 2000-09-30      2021-07-20  # Apply the age_dob_process function to the data age_dob_process(data.var=my_data, age.var = \"age\", dob.var = \"dob\", date.var = \"date_enrollment\", lim1 = 30, lim2 = 40) #>   ID age        dob date_enrollment AGE_CALC AGE_CATEG #> 1  1  25 1980-01-15      2023-05-10 25.00000       <30 #> 2  2  NA 1995-03-22      2022-12-01 27.69610      <NA> #> 3  3  30 1975-08-10      2022-02-18 30.00000     30-39 #> 4  4  NA 1988-11-05      2023-02-05 34.25051      <NA> #> 5  5  NA 2000-09-30      2021-07-20 20.80219      <NA>"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Berra Erkosar. Author, maintainer. FIND. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Erkosar B (2024). finddataanalysis: FIND Data Analysis Functions. R package version 0.0.0.9000.","code":"@Manual{,   title = {finddataanalysis: FIND Data Analysis Functions},   author = {Berra Erkosar},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"finddataanalysis","dir":"","previous_headings":"","what":"FIND Data Analysis Functions","title":"FIND Data Analysis Functions","text":"goal finddataanalysis collection tools used data analysis.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"FIND Data Analysis Functions","text":"can install development version finddataanalysis GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"finddx/finddataanalysis\")"},{"path":"/index.html","id":"list-of-functions","dir":"","previous_headings":"","what":"List of functions","title":"FIND Data Analysis Functions","text":"List functions included help. Run following code Console:","code":"help(package =\"finddataanalysis\")"},{"path":"/index.html","id":"performance-evaluations","dir":"","previous_headings":"","what":"Performance Evaluations","title":"FIND Data Analysis Functions","text":"basic example shows calculate sensitivity specificity diagnostic test using automatized function","code":"library(finddataanalysis) #> Warning: replacing previous import 'ggplot2::last_plot' by 'plotly::last_plot' #> when loading 'finddataanalysis' #> Warning: replacing previous import 'plotly::rename' by 'plyr::rename' when #> loading 'finddataanalysis' library(DT) df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))"},{"path":"/index.html","id":"generating-all-outputs","dir":"","previous_headings":"Performance Evaluations","what":"Generating All outputs","title":"FIND Data Analysis Functions","text":"","code":"eval_output <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = TRUE, table_output = TRUE, file_name = \"MyEvaluationExample\") eval_output$sen_plot eval_output$spe_plot eval_output$table"},{"path":"/index.html","id":"generating-forest-plot-outputs","dir":"","previous_headings":"Performance Evaluations","what":"Generating Forest Plot Outputs","title":"FIND Data Analysis Functions","text":"","code":"eval_output_only_forest <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = TRUE, table_output = FALSE) eval_output_only_forest$sen_plot eval_output_only_forest$spe_plot eval_output_only_forest$table  # Should give NULL #> NULL"},{"path":"/index.html","id":"generating-a-simple-data-frame-output-where-the-table-is-not-formatted-especially-considering-the-confidence-intervals-this-form-is-computer-friendly","dir":"","previous_headings":"Performance Evaluations","what":"Generating a simple data frame output where the table is not formatted, especially considering the confidence intervals. This form is computer friendly.","title":"FIND Data Analysis Functions","text":"","code":"eval_output_simple_df <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = FALSE, table_output = FALSE)  eval_output_simple_df #>    N TP FP FN TN Sensitivity Specificity SensLower SensUpper SpeLower SpeUpper #> 1 40 10 10  0 20         100       66.67     72.25    100.00    48.78    80.77 #> 2 40  5  0  5 30          50      100.00     23.66     76.34    88.65   100.00 #> 3 40  9  0  1 30          90      100.00     59.58     98.21    88.65   100.00 #>   Balanced_Accuracy BAlower BAupper DOR DORUpper DORLower PPV PPVLower PPVUpper #> 1             83.34   60.52   90.38 Inf      Inf      NaN  50    29.93    70.07 #> 2             75.00   56.15   88.17 Inf      Inf      NaN 100    56.55   100.00 #> 3             95.00   74.11   99.10 Inf      Inf      NaN 100    70.09   100.00 #>      NPV NPVLower NPVUpper Accuracy ACCLower ACCUpper     Test #> 1 100.00    83.89   100.00     75.0    59.81    85.81     Tgs1 #> 2  85.71    70.62    93.74     87.5    73.89    94.54      AFD #> 3  96.77    83.81    99.43     97.5    87.12    99.56 SimpleDx"},{"path":"/index.html","id":"performance-evaluation-by-groups","dir":"","previous_headings":"Performance Evaluations","what":"Performance Evaluation by Groups","title":"FIND Data Analysis Functions","text":"can subgroup analysis automatically defining group variable (group_var). Please note , parameter specified quotation parks. E.g.: variable instead “variable”","code":"data(my_dataset) head(my_dataset) #>         ID Test_Name   Result  RefTest #> 1 01STUDID       ABC Negative Negative #> 2 01STUDID       DST Negative Negative #> 3 01STUDID       HCG Negative Negative #> 4 01STUDID      LLJK Negative Negative #> 5 01STUDID      ddfs Negative Negative #> 6 01STUDID Weird Lab Negative Negative eval_output <- performance_eval_auto(data_var = my_dataset, list_index = \"Result\", ref = \"RefTest\", conf.level = 0.95, labels = \"Test\", forest_plot = FALSE, table_output = TRUE, file_name = \"MyEvaluationExample\", data_long = TRUE, group_var = Test_Name )"},{"path":"/reference/CI_Calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval Calculator — CI_Calc","title":"Confidence Interval Calculator — CI_Calc","text":"Calculates confidence interval given proportion normal approximation.","code":""},{"path":"/reference/CI_Calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval Calculator — CI_Calc","text":"","code":"CI_Calc(alpha, proportion, n)"},{"path":"/reference/CI_Calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval Calculator — CI_Calc","text":"alpha significance level proportion proportion n sample size","code":""},{"path":"/reference/CI_Calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval Calculator — CI_Calc","text":"confidence interval lower upper bounds","code":""},{"path":"/reference/CI_Calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval Calculator — CI_Calc","text":"","code":"CI_Calc(alpha=0.05, proportion=0.62, n= 500) #> [1] 0.0425"},{"path":"/reference/ROC_calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate ROC-like characteristics (i.e. based on varying REFRENCE thresholds) — ROC_calculate","title":"Calculate ROC-like characteristics (i.e. based on varying REFRENCE thresholds) — ROC_calculate","text":"Calculates sensitivity false positivity rate based multiple reference columns defined thresholds analysis similar ROC curve diagnostic ability binary classifier system assessed REFERENCE discrimination threshold varied.","code":""},{"path":"/reference/ROC_calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate ROC-like characteristics (i.e. based on varying REFRENCE thresholds) — ROC_calculate","text":"","code":"ROC_calculate(data_var, index, ref, conf.level = 0.95, var_name_suffix_cut)"},{"path":"/reference/ROC_calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate ROC-like characteristics (i.e. based on varying REFRENCE thresholds) — ROC_calculate","text":"data_var data table index index test column containing results: \"Positive\" \"Negative\" ref list containing names reference test columns conf.level confidence level var_name_suffix_cut suffix based reference test column name cut. result suffix + threshold","code":""},{"path":"/reference/ROC_calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate ROC-like characteristics (i.e. based on varying REFRENCE thresholds) — ROC_calculate","text":"sensitivity specificity based differnt thresholds classify reference positive negative","code":""},{"path":"/reference/age_dob_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Age and DOB processing — age_dob_process","title":"Age and DOB processing — age_dob_process","text":"function first calculates age based present age variable unavailable date birth enrollment/consent date, end runs age_groups function divide different categories.","code":""},{"path":"/reference/age_dob_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age and DOB processing — age_dob_process","text":"","code":"age_dob_process(   data.var,   age.var,   dob.var,   date.var,   lim1,   lim2,   lim3 = NULL,   lim4 = NULL,   lim5 = NULL )"},{"path":"/reference/age_dob_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age and DOB processing — age_dob_process","text":"data.var Data table age.var Variable containing age years. dob.var Variable containing date birth date.var Variable containing enrolment/consent date lim1 Age limit categorization lim2 Age limit categorization lim3 Age limit categorization lim4 Age limit categorization lim5 Age limit categorization","code":""},{"path":"/reference/age_dob_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age and DOB processing — age_dob_process","text":"Returns data table calculated age column categorized age column added.","code":""},{"path":"/reference/age_dob_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age and DOB processing — age_dob_process","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union   my_data <- data.frame(   ID = c(1, 2, 3, 4, 5),   age = c(25, NA, 30, NA, NA),   dob = c(\"1980-01-15\", \"1995-03-22\", \"1975-08-10\", \"1988-11-05\", \"2000-09-30\"),   date_enrollment = c(\"2023-05-10\", \"2022-12-01\", \"2022-02-18\", \"2023-02-05\", \"2021-07-20\") )  # Display the data print(my_data) #>   ID age        dob date_enrollment #> 1  1  25 1980-01-15      2023-05-10 #> 2  2  NA 1995-03-22      2022-12-01 #> 3  3  30 1975-08-10      2022-02-18 #> 4  4  NA 1988-11-05      2023-02-05 #> 5  5  NA 2000-09-30      2021-07-20  # Apply the age_dob_process function to the data age_dob_process(data.var=my_data, age.var = \"age\", dob.var = \"dob\", date.var = \"date_enrollment\", lim1 = 30, lim2 = 40) #>   ID age        dob date_enrollment AGE_CALC AGE_CATEG #> 1  1  25 1980-01-15      2023-05-10 25.00000       <30 #> 2  2  NA 1995-03-22      2022-12-01 27.69610      <NA> #> 3  3  30 1975-08-10      2022-02-18 30.00000     30-39 #> 4  4  NA 1988-11-05      2023-02-05 34.25051      <NA> #> 5  5  NA 2000-09-30      2021-07-20 20.80219      <NA>"},{"path":"/reference/age_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Age groups — age_groups","title":"Age groups — age_groups","text":"Creates new categorical variable based age.","code":""},{"path":"/reference/age_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age groups — age_groups","text":"","code":"age_groups(data.var, age, lim1, lim2, lim3 = NULL, lim4 = NULL, lim5 = NULL)"},{"path":"/reference/age_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age groups — age_groups","text":"data.var Data table age Variable containing age years. lim1 Age limit categorization lim2 Age limit categorization lim3 Age limit categorization lim4 Age limit categorization lim5 Age limit categorization","code":""},{"path":"/reference/age_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age groups — age_groups","text":"Creates columns typical ranges.","code":""},{"path":"/reference/age_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age groups — age_groups","text":"","code":"df = data.frame(ID = c(1:20), age = round(runif(20, 3, 86))) age_groups(data.var = df, age = \"age\", lim1=5, lim2=11, lim3=18, lim4=45, lim5=60) #>    ID age AGE_CATEG #> 1   1  10      5-10 #> 2   2  72       ≥60 #> 3   3  53     45-59 #> 4   4  16     11-17 #> 5   5   4        <5 #> 6   6  42     18-44 #> 7   7  44     18-44 #> 8   8  27     18-44 #> 9   9  64       ≥60 #> 10 10  67       ≥60 #> 11 11  76       ≥60 #> 12 12  18     18-44 #> 13 13   6      5-10 #> 14 14  30     18-44 #> 15 15  36     18-44 #> 16 16  19     18-44 #> 17 17  36     18-44 #> 18 18   8      5-10 #> 19 19  35     18-44 #> 20 20  84       ≥60 df = data.frame(ID = c(1:20), AGE = round(runif(20, 3, 25))) age_groups(data.var = df, age = \"AGE\", lim1=5, lim2=11, lim3=18) #>    ID AGE AGE_CATEG #> 1   1   9      5-10 #> 2   2  18       ≥18 #> 3   3  19       ≥18 #> 4   4   7      5-10 #> 5   5  25       ≥18 #> 6   6  19       ≥18 #> 7   7   4        <5 #> 8   8  15     11-17 #> 9   9  18       ≥18 #> 10 10  18       ≥18 #> 11 11   4        <5 #> 12 12   8      5-10 #> 13 13  10      5-10 #> 14 14  17     11-17 #> 15 15  14     11-17 #> 16 16  13     11-17 #> 17 17  19       ≥18 #> 18 18  24       ≥18 #> 19 19   7      5-10 #> 20 20   8      5-10"},{"path":"/reference/categorize_result.html","id":null,"dir":"Reference","previous_headings":"","what":"categorize_result — categorize_result","title":"categorize_result — categorize_result","text":"Categorize subject \"Positive\" \"Negative\", based variable interest specified threshold. values bigger equal threshold categorized \"Positive\", others \"Negative\". list thresholds can provided.","code":""},{"path":"/reference/categorize_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"categorize_result — categorize_result","text":"","code":"categorize_result(dataframe, variable, thresholds)"},{"path":"/reference/categorize_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"categorize_result — categorize_result","text":"dataframe data table containing test results variable continuous variable thresholds thresholds applied","code":""},{"path":"/reference/categorize_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"categorize_result — categorize_result","text":"Data table categorization added","code":""},{"path":"/reference/categorize_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"categorize_result — categorize_result","text":"","code":"df <- data.frame(results = c(sample(1:100, 50, replace=TRUE))) categorize_result(dataframe = df, variable = \"results\", thresholds = 50) #>    results Result50 #> 1       32 Negative #> 2       53 Positive #> 3       70 Positive #> 4        9 Negative #> 5       22 Negative #> 6       10 Negative #> 7       32 Negative #> 8       34 Negative #> 9       17 Negative #> 10      52 Positive #> 11      56 Positive #> 12      22 Negative #> 13      95 Positive #> 14       1 Negative #> 15      70 Positive #> 16      34 Negative #> 17      51 Positive #> 18      46 Negative #> 19      65 Positive #> 20      25 Negative #> 21      37 Negative #> 22       8 Negative #> 23      33 Negative #> 24      96 Positive #> 25      83 Positive #> 26      92 Positive #> 27      28 Negative #> 28      48 Negative #> 29      75 Positive #> 30      90 Positive #> 31      35 Negative #> 32       2 Negative #> 33      87 Positive #> 34       3 Negative #> 35      38 Negative #> 36      68 Positive #> 37      65 Positive #> 38       6 Negative #> 39      22 Negative #> 40      19 Negative #> 41       2 Negative #> 42      64 Positive #> 43      40 Negative #> 44      65 Positive #> 45      28 Negative #> 46      97 Positive #> 47      71 Positive #> 48      12 Negative #> 49      54 Positive #> 50      41 Negative"},{"path":"/reference/categorize_result_PCR.html","id":null,"dir":"Reference","previous_headings":"","what":"categorize_result_PCR — categorize_result_PCR","title":"categorize_result_PCR — categorize_result_PCR","text":"categorize_result values smaller threshold categorized \"Positive\", others \"Negative\".","code":""},{"path":"/reference/categorize_result_PCR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"categorize_result_PCR — categorize_result_PCR","text":"","code":"categorize_result_PCR(dataframe, variable, thresholds)"},{"path":"/reference/categorize_result_PCR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"categorize_result_PCR — categorize_result_PCR","text":"dataframe data table containing test results variable continuous variable - PCR Ct data thresholds thresholds applied","code":""},{"path":"/reference/categorize_result_PCR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"categorize_result_PCR — categorize_result_PCR","text":"Data table category added","code":""},{"path":"/reference/cohen_agreement.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohen agreement — cohen_agreement","title":"Cohen agreement — cohen_agreement","text":"Calculates Cohen's kappa generates table including number positive negative agreement, well positive, negative,  overall percent agreements, Kappa value.","code":""},{"path":"/reference/cohen_agreement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohen agreement — cohen_agreement","text":"","code":"cohen_agreement(data_var, var1, var2)"},{"path":"/reference/cohen_agreement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohen agreement — cohen_agreement","text":"data_var data table var1 test \"Positive\" \"Negative\"results. var2 comparator \"Positive\" \"Negative\"results.","code":""},{"path":"/reference/cohen_agreement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cohen agreement — cohen_agreement","text":"Data table","code":""},{"path":"/reference/cohen_agreement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cohen agreement — cohen_agreement","text":"","code":"df <- data.frame(Test1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Test2 = c(rep(\"Positive\", 30), rep(\"Negative\", 10))) cohen_agreement(data_var = df, var1 = \"Test1\", var2 = \"Test2\") #>   All Positive.n Test(+) Comp(-).n Test(-) Comp(+).n All Negative.n NPA #> 1             20                 0                10             10 100 #>   Lower bound 95% CI NPA Upper bound 95% CI NPA  PPA Lower bound 95% CI PPA #> 1                    100                    100 66.7                   49.8 #>   Upper bound 95% CI PPA Percentage of agreement Lower bound 95% CI Overall PA #> 1                   83.6                      75                          61.6 #>   Upper bound 95% CI Overall PA Cohen's Kappa #> 1                          88.4          0.50"},{"path":"/reference/compare_sen_spe.html","id":null,"dir":"Reference","previous_headings":"","what":"compare_sen_spe — compare_sen_spe","title":"compare_sen_spe — compare_sen_spe","text":"two independent groups, Z-score calculated two proportions (.e. sensitivities specificities) compared. default, test two tailed, lower upper tail can specified parameters.","code":""},{"path":"/reference/compare_sen_spe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"compare_sen_spe — compare_sen_spe","text":"","code":"compare_sen_spe(s1, s2, n1, n2, two.sided = TRUE)"},{"path":"/reference/compare_sen_spe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"compare_sen_spe — compare_sen_spe","text":"s1 Sensitivity/specificity first group s2 Sensitivity/specificity second group n1 Total number confirmed positives/negatives respectively first group n2 Total number confirmed positives/negatives respectively second group two.sided TRUE, equivalence tested, FALSE, directional inferences made","code":""},{"path":"/reference/compare_sen_spe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"compare_sen_spe — compare_sen_spe","text":"dataframe containing Z-Score P-value","code":""},{"path":"/reference/compare_sen_spe.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"compare_sen_spe — compare_sen_spe","text":"Zhou XH, Obuchowski NA McClish DK. Statistical Methods Diagnostic Medicine. 2011;2:193-228","code":""},{"path":"/reference/compare_sen_spe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"compare_sen_spe — compare_sen_spe","text":"","code":"result.df <- data.frame(Tests = c(\"Test1\", \"Test2\"), TP = c(82, 140), FN = c(18, 60)) result.df$N <- result.df$TP +result.df$FN result.df$sen <- result.df$TP/result.df$N compare_sen_spe(s1 = result.df$sen[1], s2 = result.df$sen[2], n1 = result.df$N[1], n2 = result.df$N[2],two.sided = TRUE) #>   Statistic       Value #> 1         Z -2.38761651 #> 2         P  0.01695803"},{"path":"/reference/composite_for_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"composite_for_roc — composite_for_roc","title":"composite_for_roc — composite_for_roc","text":"Define multiple composite references make analysis similar ROC curve diagnostic ability binary classifier system assessed REFERENCE discrimination threshold varied.","code":""},{"path":"/reference/composite_for_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"composite_for_roc — composite_for_roc","text":"","code":"composite_for_roc(ref_1, ref_2, test_refs, data_frame)"},{"path":"/reference/composite_for_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"composite_for_roc — composite_for_roc","text":"ref_1 Reference 1 ref_2 Reference 2 test_refs Reference categorized based multiple thresholds data_frame Data table","code":""},{"path":"/reference/composite_for_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"composite_for_roc — composite_for_roc","text":"Data table containing possible composite references based thresholds applied","code":""},{"path":"/reference/composite_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"composite_reference — composite_reference","title":"composite_reference — composite_reference","text":"Generates composite reference based 3 tests. tests positive, subject classified positive. Works 2 3 reference tests.","code":""},{"path":"/reference/composite_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"composite_reference — composite_reference","text":"","code":"composite_reference(ref_1, ref_2, ref_3 = NULL, data_frame)"},{"path":"/reference/composite_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"composite_reference — composite_reference","text":"ref_1 Test1 containing \"Positive \"Negative\" Results ref_2 Test2 containing \"Positive \"Negative\" Results ref_3 Test3 containing \"Positive \"Negative\" Results data_frame Data table containing 3 tests","code":""},{"path":"/reference/composite_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"composite_reference — composite_reference","text":"Data table composite reference added","code":""},{"path":"/reference/composite_reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"composite_reference — composite_reference","text":"","code":"df <- data.frame(T1 = c(rep(\"Positive\", 10), rep(\"Negative\", 10), rep(\"Negative\", 10)), T2 = c(rep(\"Positive\", 10), rep(\"Positive\", 10), rep(\"Negative\", 10))) composite_reference(ref_1 = \"T1\", ref_2 = \"T2\", ref_3 = NULL, data_frame = df) #>          T1       T2    T1_T2 #> 1  Positive Positive Positive #> 2  Positive Positive Positive #> 3  Positive Positive Positive #> 4  Positive Positive Positive #> 5  Positive Positive Positive #> 6  Positive Positive Positive #> 7  Positive Positive Positive #> 8  Positive Positive Positive #> 9  Positive Positive Positive #> 10 Positive Positive Positive #> 11 Negative Positive Positive #> 12 Negative Positive Positive #> 13 Negative Positive Positive #> 14 Negative Positive Positive #> 15 Negative Positive Positive #> 16 Negative Positive Positive #> 17 Negative Positive Positive #> 18 Negative Positive Positive #> 19 Negative Positive Positive #> 20 Negative Positive Positive #> 21 Negative Negative Negative #> 22 Negative Negative Negative #> 23 Negative Negative Negative #> 24 Negative Negative Negative #> 25 Negative Negative Negative #> 26 Negative Negative Negative #> 27 Negative Negative Negative #> 28 Negative Negative Negative #> 29 Negative Negative Negative #> 30 Negative Negative Negative"},{"path":"/reference/composite_reference_majority.html","id":null,"dir":"Reference","previous_headings":"","what":"Composite Reference Majority — composite_reference_majority","title":"Composite Reference Majority — composite_reference_majority","text":"function reads results 3 reference test results takes majority final result.","code":""},{"path":"/reference/composite_reference_majority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Composite Reference Majority — composite_reference_majority","text":"","code":"composite_reference_majority(ref_1, ref_2, ref_3, data_frame)"},{"path":"/reference/composite_reference_majority.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Composite Reference Majority — composite_reference_majority","text":"ref_1 Test1 containing \"Positive \"Negative\" Results ref_2 Test2 containing \"Positive \"Negative\" Results ref_3 Test3 containing \"Positive \"Negative\" Results data_frame Data table containing 3 tests","code":""},{"path":"/reference/composite_reference_majority.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Composite Reference Majority — composite_reference_majority","text":"Data table composite reference added","code":""},{"path":"/reference/composite_reference_majority.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Composite Reference Majority — composite_reference_majority","text":"","code":"df <- data.frame(T1 = c(rep(\"Positive\", 10), rep(\"Negative\", 10), rep(\"Negative\", 10)), T2 = c(rep(\"Positive\", 10), rep(\"Positive\", 10), rep(\"Negative\", 10)), T3 = c(rep(\"Negative\", 10), rep(\"Positive\", 10), rep(\"Negative\", 10))) composite_reference_majority(ref_1 = \"T1\", ref_2 = \"T2\", ref_3 = \"T3\", data_frame = df) #>          T1       T2       T3 MajorityRef #> 1  Positive Positive Negative    Positive #> 2  Positive Positive Negative    Positive #> 3  Positive Positive Negative    Positive #> 4  Positive Positive Negative    Positive #> 5  Positive Positive Negative    Positive #> 6  Positive Positive Negative    Positive #> 7  Positive Positive Negative    Positive #> 8  Positive Positive Negative    Positive #> 9  Positive Positive Negative    Positive #> 10 Positive Positive Negative    Positive #> 11 Negative Positive Positive    Positive #> 12 Negative Positive Positive    Positive #> 13 Negative Positive Positive    Positive #> 14 Negative Positive Positive    Positive #> 15 Negative Positive Positive    Positive #> 16 Negative Positive Positive    Positive #> 17 Negative Positive Positive    Positive #> 18 Negative Positive Positive    Positive #> 19 Negative Positive Positive    Positive #> 20 Negative Positive Positive    Positive #> 21 Negative Negative Negative    Negative #> 22 Negative Negative Negative    Negative #> 23 Negative Negative Negative    Negative #> 24 Negative Negative Negative    Negative #> 25 Negative Negative Negative    Negative #> 26 Negative Negative Negative    Negative #> 27 Negative Negative Negative    Negative #> 28 Negative Negative Negative    Negative #> 29 Negative Negative Negative    Negative #> 30 Negative Negative Negative    Negative"},{"path":"/reference/dx_yield.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic Yield Calculates Diagnostic yield: # Positives per Index Test/ # Positive by Reference Test — dx_yield","title":"Diagnostic Yield Calculates Diagnostic yield: # Positives per Index Test/ # Positive by Reference Test — dx_yield","text":"Diagnostic Yield Calculates Diagnostic yield: # Positives per Index Test/ # Positive Reference Test","code":""},{"path":"/reference/dx_yield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic Yield Calculates Diagnostic yield: # Positives per Index Test/ # Positive by Reference Test — dx_yield","text":"","code":"dx_yield(data_arg, ref_arg, index_arg, conf.level = 0.95)"},{"path":"/reference/dx_yield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic Yield Calculates Diagnostic yield: # Positives per Index Test/ # Positive by Reference Test — dx_yield","text":"data_arg data frame ref_arg Defined reference column index_arg index test results column conf.level Level confidence","code":""},{"path":"/reference/dx_yield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic Yield Calculates Diagnostic yield: # Positives per Index Test/ # Positive by Reference Test — dx_yield","text":"Diagnostic yield confidence intervals","code":""},{"path":"/reference/dx_yield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic Yield Calculates Diagnostic yield: # Positives per Index Test/ # Positive by Reference Test — dx_yield","text":"","code":"df_ex <- data.frame(REF = c(rep('Positive', 50), rep('Negative', 50)), INDEX = c(rep('Positive', 3), rep('Negative', 78), rep('Positive', 19)))  dx_yield(data_arg = df_ex, ref_arg = \"REF\", index_arg = \"INDEX\", conf.level = 0.95) #> [1] \"44.0 [31.2-57.7]\""},{"path":"/reference/finddataanalysis-package.html","id":null,"dir":"Reference","previous_headings":"","what":"finddataanalysis: FIND Data Analysis Functions — finddataanalysis-package","title":"finddataanalysis: FIND Data Analysis Functions — finddataanalysis-package","text":"Includes generic functions frequently used data analyses FIND.","code":""},{"path":"/reference/finddataanalysis-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"finddataanalysis: FIND Data Analysis Functions — finddataanalysis-package","text":"Maintainer: Berra Erkosar berra.erkosar@finddx.org contributors: FIND [copyright holder]","code":""},{"path":"/reference/format_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"format_colnames — format_colnames","title":"format_colnames — format_colnames","text":"Edits column names table generated cohen_agreement, make explicit.","code":""},{"path":"/reference/format_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"format_colnames — format_colnames","text":"","code":"format_colnames(data_frame, test1, test2)"},{"path":"/reference/format_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"format_colnames — format_colnames","text":"data_frame data table generated cohen_agreement test1 Names test test2 Name comparator","code":""},{"path":"/reference/format_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"format_colnames — format_colnames","text":"Returns nicely formatted colnames","code":""},{"path":"/reference/format_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"format_colnames — format_colnames","text":"","code":"df <- data.frame(Test1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Test2 = c(rep(\"Positive\", 30), rep(\"Negative\", 10))) results <- cohen_agreement(data_var = df, var1 = \"Test1\", var2 = \"Test2\") print(results) #>   All Positive.n Test(+) Comp(-).n Test(-) Comp(+).n All Negative.n NPA #> 1             20                 0                10             10 100 #>   Lower bound 95% CI NPA Upper bound 95% CI NPA  PPA Lower bound 95% CI PPA #> 1                    100                    100 66.7                   49.8 #>   Upper bound 95% CI PPA Percentage of agreement Lower bound 95% CI Overall PA #> 1                   83.6                      75                          61.6 #>   Upper bound 95% CI Overall PA Cohen's Kappa #> 1                          88.4          0.50 format_colnames(data_frame = results, test1 = \"This Test\", test2 = \"The Other Test\") #>   All Positive This Test(+) The Other Test(-) This Test(-) The Other Test(+) #> 1           20                              0                             10 #>   All Negative NPA Lower bound 95% CI NPA Upper bound 95% CI NPA  PPA #> 1           10 100                    100                    100 66.7 #>   Lower bound 95% CI PPA Upper bound 95% CI PPA Overall PA #> 1                   49.8                   83.6         75 #>   Lower bound 95% CI Overall PA Upper bound 95% CI Overall PA Cohen's Kappa #> 1                          61.6                          88.4          0.50"},{"path":"/reference/group_means_concordence.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Means - Supplement for Concordance Analysis — group_means_concordence","title":"Group Means - Supplement for Concordance Analysis — group_means_concordence","text":"Calculate group means continuous variable interest possible combinations agreements three reference columns","code":""},{"path":"/reference/group_means_concordence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Means - Supplement for Concordance Analysis — group_means_concordence","text":"","code":"group_means_concordence(data_var, mean_var, var1, var2, var3)"},{"path":"/reference/group_means_concordence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group Means - Supplement for Concordance Analysis — group_means_concordence","text":"data_var data table mean_var continuous variable mean calculated var1 bifactor variable \"Positive\" \"Negative\" results. var2 bifactor variable \"Positive\" \"Negative\" results. var3 bifactor variable \"Positive\" \"Negative\" results.","code":""},{"path":"/reference/group_means_concordence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group Means - Supplement for Concordance Analysis — group_means_concordence","text":"Mean numeric column based groups defined combination three reference columns","code":""},{"path":"/reference/group_means_concordence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group Means - Supplement for Concordance Analysis — group_means_concordence","text":"","code":"df <- data.frame(Test1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Test2 = c(rep(\"Negative\", 5), rep(\"Positive\", 5), rep(\"Negative\", 30)), Test3 = c(rep(\"Positive\", 10), rep(\"Negative\", 25), rep(\"Positive\", 5)), MyVariable = sample(1:100, 40))   group_means_concordence(data_var = df, mean_var = \"MyVariable\", var1 = \"Test1\", var2 = \"Test2\", var3 = \"Test3\") #>        Groups     Mean    Stdev #> 1     All_pos 28.80000 28.28781 #> 2     All_neg 48.93333 21.49574 #> 3 v1P_v2N_v3N 48.30000 30.56887 #> 4 v1N_v2P_v3N      NaN       NA #> 5 v1N_v2N_v3P 44.80000 42.77499 #> 6 v1P_v2P_v3N      NaN       NA #> 7 v1N_v2P_v3P      NaN       NA #> 8 v1P_v2N_v3P 41.60000 22.01817"},{"path":"/reference/multi_sen_spe.html","id":null,"dir":"Reference","previous_headings":"","what":"multi_sen_spe for Table Display — multi_sen_spe","title":"multi_sen_spe for Table Display — multi_sen_spe","text":"Calculates displays sensitivity specificity confidence intervals data frame multiple index tests reference test. used displaying result table.","code":""},{"path":"/reference/multi_sen_spe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi_sen_spe for Table Display — multi_sen_spe","text":"","code":"multi_sen_spe(data_var, list_index, ref, conf.level = 0.95, index_names = NULL)"},{"path":"/reference/multi_sen_spe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi_sen_spe for Table Display — multi_sen_spe","text":"data_var Data table containing tests results list_index list index tests \"Negative\" \"Positive\" results ref reference test \"Negative\" \"Positive\" results conf.level confidence level, 1-alpha – default 95% index_names optional list containing names index tests","code":""},{"path":"/reference/multi_sen_spe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi_sen_spe for Table Display — multi_sen_spe","text":"data table TP/FP/TN/FN, sensitivity, specificity confidence intervals index tests specified list","code":""},{"path":"/reference/multi_sen_spe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multi_sen_spe for Table Display — multi_sen_spe","text":"","code":"library(finddataanalysis) df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))  multi_sen_spe(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"a\", \"b\", \"c\")) #>    N TP FP FN TN Sensitivity Sensitivity [95%CI] Specificity #> a 40 10 10  0 20         100       [72.25-100.0]       66.67 #> b 40  5  0  5 30          50       [23.66-76.34]         100 #> c 40  9  0  1 30          90       [59.58-98.21]         100 #>   Specificity [95%CI] Balanced Accuracy B. Accuracy [95%CI] DOR DOR [95%CI] PPV #> a       [48.78-80.77]             83.34       [60.52-90.38] Inf   [NaN-Inf]  50 #> b       [88.65-100.0]                75       [56.15-88.17] Inf   [NaN-Inf] 100 #> c       [88.65-100.0]                95        [74.11-99.1] Inf   [NaN-Inf] 100 #>     PPV [95%CI]   NPV   NPV [95%CI] Accuracy Accuracy [95%CI] #> a [29.93-70.07]   100 [83.89-100.0]       75    [59.81-85.81] #> b [56.55-100.0] 85.71 [70.62-93.74]     87.5    [73.89-94.54] #> c [70.09-100.0] 96.77 [83.81-99.43]     97.5    [87.12-99.56]"},{"path":"/reference/multi_sen_spe_dt_out.html","id":null,"dir":"Reference","previous_headings":"","what":"multi_sen_spe with DT table output — multi_sen_spe_dt_out","title":"multi_sen_spe with DT table output — multi_sen_spe_dt_out","text":"Executes multi_sen_spe function creates nicely formatted table output download options using DT package","code":""},{"path":"/reference/multi_sen_spe_dt_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi_sen_spe with DT table output — multi_sen_spe_dt_out","text":"","code":"multi_sen_spe_dt_out(   data_var,   list_index,   ref,   conf.level = 0.95,   index_names = NULL,   file_name = \"performance_eval\" )"},{"path":"/reference/multi_sen_spe_dt_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi_sen_spe with DT table output — multi_sen_spe_dt_out","text":"data_var Data table containing tests results list_index list index tests \"Negative\" \"Positive\" results ref reference test \"Negative\" \"Positive\" results conf.level confidence level, 1-alpha – default 95% index_names optional list containing names index tests file_name optional text containing name file downloaded","code":""},{"path":"/reference/multi_sen_spe_dt_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi_sen_spe with DT table output — multi_sen_spe_dt_out","text":"formatted data table displaying performance characteristics","code":""},{"path":"/reference/multi_sen_spe_dt_out.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multi_sen_spe with DT table output — multi_sen_spe_dt_out","text":"","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))   multi_sen_spe_dt_out(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, file_name = \"ZX001_performance\", index_names = c(\"a\", \"b\", \"c\"))  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"Buttons\"],\"data\":[[\"a\",\"b\",\"c\"],[\"40\",\"40\",\"40\"],[\"10\",\"5\",\"9\"],[\"10\",\"0\",\"0\"],[\"0\",\"5\",\"1\"],[\"20\",\"30\",\"30\"],[\"100\",\"50\",\"90\"],[\"[72.25-100.0]\",\"[23.66-76.34]\",\"[59.58-98.21]\"],[\"66.67\",\"100\",\"100\"],[\"[48.78-80.77]\",\"[88.65-100.0]\",\"[88.65-100.0]\"],[\"83.34\",\"75\",\"95\"],[\"[60.52-90.38]\",\"[56.15-88.17]\",\"[74.11-99.1]\"],[\"Inf\",\"Inf\",\"Inf\"],[\"[NaN-Inf]\",\"[NaN-Inf]\",\"[NaN-Inf]\"],[\"50\",\"100\",\"100\"],[\"[29.93-70.07]\",\"[56.55-100.0]\",\"[70.09-100.0]\"],[\"100\",\"85.71\",\"96.77\"],[\"[83.89-100.0]\",\"[70.62-93.74]\",\"[83.81-99.43]\"],[\"75\",\"87.5\",\"97.5\"],[\"[59.81-85.81]\",\"[73.89-94.54]\",\"[87.12-99.56]\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>N<\\/th>\\n      <th>TP<\\/th>\\n      <th>FP<\\/th>\\n      <th>FN<\\/th>\\n      <th>TN<\\/th>\\n      <th>Sensitivity<\\/th>\\n      <th>Sensitivity [95%CI]<\\/th>\\n      <th>Specificity<\\/th>\\n      <th>Specificity [95%CI]<\\/th>\\n      <th>Balanced Accuracy<\\/th>\\n      <th>B. Accuracy [95%CI]<\\/th>\\n      <th>DOR<\\/th>\\n      <th>DOR [95%CI]<\\/th>\\n      <th>PPV<\\/th>\\n      <th>PPV [95%CI]<\\/th>\\n      <th>NPV<\\/th>\\n      <th>NPV [95%CI]<\\/th>\\n      <th>Accuracy<\\/th>\\n      <th>Accuracy [95%CI]<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"Blfrtip\",\"buttons\":[{\"extend\":\"copy\",\"filename\":\"ZX001_performance\"},{\"extend\":\"csv\",\"filename\":\"ZX001_performance\"},{\"extend\":\"excel\",\"filename\":\"ZX001_performance\"},{\"extend\":\"pdf\",\"filename\":\"ZX001_performance\"}],\"lengthMenu\":[[10,-1],[\"10\",\"All\"]],\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"N\",\"targets\":1},{\"name\":\"TP\",\"targets\":2},{\"name\":\"FP\",\"targets\":3},{\"name\":\"FN\",\"targets\":4},{\"name\":\"TN\",\"targets\":5},{\"name\":\"Sensitivity\",\"targets\":6},{\"name\":\"Sensitivity [95%CI]\",\"targets\":7},{\"name\":\"Specificity\",\"targets\":8},{\"name\":\"Specificity [95%CI]\",\"targets\":9},{\"name\":\"Balanced Accuracy\",\"targets\":10},{\"name\":\"B. Accuracy [95%CI]\",\"targets\":11},{\"name\":\"DOR\",\"targets\":12},{\"name\":\"DOR [95%CI]\",\"targets\":13},{\"name\":\"PPV\",\"targets\":14},{\"name\":\"PPV [95%CI]\",\"targets\":15},{\"name\":\"NPV\",\"targets\":16},{\"name\":\"NPV [95%CI]\",\"targets\":17},{\"name\":\"Accuracy\",\"targets\":18},{\"name\":\"Accuracy [95%CI]\",\"targets\":19}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/multi_sen_spe_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"multi_sen_spe_forest for forest plots — multi_sen_spe_forest","title":"multi_sen_spe_forest for forest plots — multi_sen_spe_forest","text":"Calculates displays sensitivity specificity confidence intervals data frame multiple index tests reference test. used displaying result table.","code":""},{"path":"/reference/multi_sen_spe_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi_sen_spe_forest for forest plots — multi_sen_spe_forest","text":"","code":"multi_sen_spe_forest(   data_var,   list_index,   ref,   conf.level = 0.95,   index_names = NULL )"},{"path":"/reference/multi_sen_spe_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi_sen_spe_forest for forest plots — multi_sen_spe_forest","text":"data_var Data table containing test results list_index list index test \"Negative\" \"Positive\" results ref reference test \"Negative\" \"Positive\" results conf.level confidence level, 1-alpha – default 95% index_names optional list containing names index tests","code":""},{"path":"/reference/multi_sen_spe_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi_sen_spe_forest for forest plots — multi_sen_spe_forest","text":"data table TP/FP/TN/FN, sensitivity, specificity confidence intervals, fed forestplot function.","code":""},{"path":"/reference/multi_sen_spe_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multi_sen_spe_forest for forest plots — multi_sen_spe_forest","text":"","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))  multi_sen_spe_forest(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"ate\",\"FNDH\", \"DXCb\")) #>    N TP FP FN TN Sensitivity Specificity SensLower SensUpper SpeLower SpeUpper #> 1 40 10 10  0 20         100       66.67     72.25    100.00    48.78    80.77 #> 2 40  5  0  5 30          50      100.00     23.66     76.34    88.65   100.00 #> 3 40  9  0  1 30          90      100.00     59.58     98.21    88.65   100.00 #>   Balanced_Accuracy BAlower BAupper DOR DORUpper DORLower PPV PPVLower PPVUpper #> 1             83.34   60.52   90.38 Inf      Inf      NaN  50    29.93    70.07 #> 2             75.00   56.15   88.17 Inf      Inf      NaN 100    56.55   100.00 #> 3             95.00   74.11   99.10 Inf      Inf      NaN 100    70.09   100.00 #>      NPV NPVLower NPVUpper Accuracy ACCLower ACCUpper Test #> 1 100.00    83.89   100.00     75.0    59.81    85.81  ate #> 2  85.71    70.62    93.74     87.5    73.89    94.54 FNDH #> 3  96.77    83.81    99.43     97.5    87.12    99.56 DXCb"},{"path":"/reference/multi_sen_spe_out_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"multi_sen_spe with forest plot output — multi_sen_spe_out_forest","title":"multi_sen_spe with forest plot output — multi_sen_spe_out_forest","text":"Executes multi_sen_spe function creates forest plots automatically.","code":""},{"path":"/reference/multi_sen_spe_out_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multi_sen_spe with forest plot output — multi_sen_spe_out_forest","text":"","code":"multi_sen_spe_out_forest(   data_var,   list_index,   ref,   conf.level = 0.95,   index_names = NULL,   labels = \"Tests\" )"},{"path":"/reference/multi_sen_spe_out_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multi_sen_spe with forest plot output — multi_sen_spe_out_forest","text":"data_var Data table containing tests results list_index list index tests \"Negative\" \"Positive\" results ref reference test \"Negative\" \"Positive\" results conf.level confidence level, 1-alpha – default 95% index_names optional list containing names index tests labels optional text axis label","code":""},{"path":"/reference/multi_sen_spe_out_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"multi_sen_spe with forest plot output — multi_sen_spe_out_forest","text":"Interactive forest plots list","code":""},{"path":"/reference/multi_sen_spe_out_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"multi_sen_spe with forest plot output — multi_sen_spe_out_forest","text":"","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30))) plots <- multi_sen_spe_out_forest(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, labels = \"Index Tests\", index_names = c(\"a\", \"b\", \"c\")) plots[[1]]  {\"x\":{\"data\":[{\"x\":[100,50,90],\"y\":[1,2,3],\"text\":[\"Test: a<br />Sensitivity: 100<br />SensLower: 72.25<br />SensUpper: 100.00\",\"Test: b<br />Sensitivity:  50<br />SensLower: 23.66<br />SensUpper:  76.34\",\"Test: c<br />Sensitivity:  90<br />SensLower: 59.58<br />SensUpper:  98.21\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"opacity\":1,\"line\":{\"color\":\"transparent\"},\"error_x\":{\"array\":[0,26.340000000000003,8.2099999999999937],\"arrayminus\":[27.75,26.34,30.420000000000002],\"type\":\"data\",\"width\":0,\"symmetric\":false,\"color\":\"rgba(0,0,0,1)\"},\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"square\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":37.260273972602747,\"l\":31.415525114155255},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"tickvals\":[0,20,40,60,80,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Sensitivity (95% CI)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"a\",\"b\",\"c\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"a\",\"b\",\"c\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Index Tests\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"18123d517830\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{},\"type\":\"scatter\"},\"1812cca80c0\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{}}},\"cur_data\":\"18123d517830\",\"visdat\":{\"18123d517830\":[\"function (y) \",\"x\"],\"1812cca80c0\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}plots[[2]]  {\"x\":{\"data\":[{\"x\":[66.670000000000002,100,100],\"y\":[1,2,3],\"text\":[\"Test: a<br />Specificity:  66.67<br />SpeLower: 48.78<br />SpeUpper:  80.77\",\"Test: b<br />Specificity: 100.00<br />SpeLower: 88.65<br />SpeUpper: 100.00\",\"Test: c<br />Specificity: 100.00<br />SpeLower: 88.65<br />SpeUpper: 100.00\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"opacity\":1,\"line\":{\"color\":\"transparent\"},\"error_x\":{\"array\":[14.099999999999994,0,0],\"arrayminus\":[17.890000000000001,11.350000000000009,11.350000000000009],\"type\":\"data\",\"width\":0,\"symmetric\":false,\"color\":\"rgba(0,0,0,1)\"},\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"square\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":37.260273972602747,\"l\":31.415525114155255},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"tickvals\":[0,20,40,60,80,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Specificity (95% CI)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"a\",\"b\",\"c\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"a\",\"b\",\"c\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Index Tests\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1812142c5134\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{},\"type\":\"scatter\"},\"18125a874739\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{}}},\"cur_data\":\"1812142c5134\",\"visdat\":{\"1812142c5134\":[\"function (y) \",\"x\"],\"18125a874739\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/nice_table.html","id":null,"dir":"Reference","previous_headings":"","what":"nice_table — nice_table","title":"nice_table — nice_table","text":"create well formatted table basic data frame version performance characteristic table generated using dplyr subgroup analyses, data formatted long format necessarily.","code":""},{"path":"/reference/nice_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nice_table — nice_table","text":"","code":"nice_table(data_var, group_name)"},{"path":"/reference/nice_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nice_table — nice_table","text":"data_var data frame group_name Name grouping variable used subgroups","code":""},{"path":"/reference/nice_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nice_table — nice_table","text":"nicely formatted DT table","code":""},{"path":"/reference/nice_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nice_table — nice_table","text":"","code":"library(dplyr) df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)), Sex = rep(c(\"M\",\"F\", \"F\", \"M\"), 10))  sex_ana <- df %>% group_by(Sex) %>% group_modify(~ performance_eval_auto(   data_var = (.x),   list_index =c(\"Index1\", \"Index2\"),   ref = \"Reference\",   conf.level = 0.95,   index_names = NULL,   labels = \"Test\",   forest_plot = FALSE, #!!!   table_output = FALSE, #!!!   file_name = \"performance_eval\",   data_long = FALSE, #!!!   group_var = NULL )) nice_table(sex_ana, \"Sex\")  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"Buttons\"],\"data\":[[\"1\",\"2\",\"3\",\"4\"],[\"Index1\",\"Index2\",\"Index1\",\"Index2\"],[\"F\",\"F\",\"M\",\"M\"],[20,20,20,20],[5,2,5,3],[5,0,5,0],[0,3,0,2],[10,15,10,15],[100,40,100,60],[\"[56.55-100.00]\",\"[11.76- 76.93]\",\"[56.55-100.00]\",\"[23.07- 88.24]\"],[66.67,100,66.67,100],[\"[41.71- 84.82]\",\"[79.61-100.00]\",\"[41.71- 84.82]\",\"[79.61-100.00]\"],[83.34,70,83.34,80],[\"[49.13-92.41]\",\"[45.69-88.47]\",\"[49.13-92.41]\",\"[51.34-94.12]\"],[null,null,null,null],[\"[NaN-Inf]\",\"[NaN-Inf]\",\"[NaN-Inf]\",\"[NaN-Inf]\"],[\"[23.66- 76.34]\",\"[34.24-100.00]\",\"[23.66- 76.34]\",\"[43.85-100.00]\"],[100,83.33,100,88.23999999999999],[\"[72.25-100.00]\",\"[60.78- 94.16]\",\"[72.25-100.00]\",\"[65.66- 96.71]\"],[75,85,75,90],[\"[53.13-88.81]\",\"[63.96-94.76]\",\"[53.13-88.81]\",\"[69.90-97.21]\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Test<\\/th>\\n      <th>Group<\\/th>\\n      <th>N<\\/th>\\n      <th>TP<\\/th>\\n      <th>FP<\\/th>\\n      <th>FN<\\/th>\\n      <th>TN<\\/th>\\n      <th>Sensitivity<\\/th>\\n      <th>Sensitivity [95%CI]<\\/th>\\n      <th>Specificity<\\/th>\\n      <th>Specificity [95%CI]<\\/th>\\n      <th>Balanced Accuracy<\\/th>\\n      <th>B. Accuracy [95%CI]<\\/th>\\n      <th>DOR<\\/th>\\n      <th>DOR [95%CI]<\\/th>\\n      <th>PPV [95%CI]<\\/th>\\n      <th>NPV<\\/th>\\n      <th>NPV [95%CI]<\\/th>\\n      <th>Accuracy<\\/th>\\n      <th>Accuracy [95%CI]<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"Blfrtip\",\"buttons\":[{\"extend\":\"copy\",\"filename\":\"subgroup.analysis\"},{\"extend\":\"csv\",\"filename\":\"subgroup.analysis\"},{\"extend\":\"excel\",\"filename\":\"subgroup.analysis\"},{\"extend\":\"pdf\",\"filename\":\"subgroup.analysis\"}],\"lengthMenu\":[[10,-1],[\"10\",\"All\"]],\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[3,4,5,6,7,8,10,12,14,17,19]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Test\",\"targets\":1},{\"name\":\"Group\",\"targets\":2},{\"name\":\"N\",\"targets\":3},{\"name\":\"TP\",\"targets\":4},{\"name\":\"FP\",\"targets\":5},{\"name\":\"FN\",\"targets\":6},{\"name\":\"TN\",\"targets\":7},{\"name\":\"Sensitivity\",\"targets\":8},{\"name\":\"Sensitivity [95%CI]\",\"targets\":9},{\"name\":\"Specificity\",\"targets\":10},{\"name\":\"Specificity [95%CI]\",\"targets\":11},{\"name\":\"Balanced Accuracy\",\"targets\":12},{\"name\":\"B. Accuracy [95%CI]\",\"targets\":13},{\"name\":\"DOR\",\"targets\":14},{\"name\":\"DOR [95%CI]\",\"targets\":15},{\"name\":\"PPV [95%CI]\",\"targets\":16},{\"name\":\"NPV\",\"targets\":17},{\"name\":\"NPV [95%CI]\",\"targets\":18},{\"name\":\"Accuracy\",\"targets\":19},{\"name\":\"Accuracy [95%CI]\",\"targets\":20}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/performance_eval_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"performance_eval_auto — performance_eval_auto","title":"performance_eval_auto — performance_eval_auto","text":"Calculates diagnostic accuracy characteristics generates report quality tables figures. Executes multi_sen_spe_out_forest, multi_sen_spe_dt_out, returns list object two forest plots DT data table display.function works wide long formats.","code":""},{"path":"/reference/performance_eval_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"performance_eval_auto — performance_eval_auto","text":"","code":"performance_eval_auto(   data_var,   list_index,   ref,   conf.level = 0.95,   index_names = NULL,   labels = \"Test\",   forest_plot = TRUE,   table_output = TRUE,   file_name = \"performance_eval\",   data_long = FALSE,   group_var = NULL )"},{"path":"/reference/performance_eval_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"performance_eval_auto — performance_eval_auto","text":"data_var Data table containing tests results list_index list index tests \"Negative\" \"Positive\" results. data long format, name column results stored. ref reference test \"Negative\" \"Positive\" results conf.level confidence level, 1-alpha – default 95% index_names optional list containing names index tests. used long data format. labels optional text axis labels forest plots. forest_plot forest plots generated? Default TRUE table_output table output generated? Default TRUE file_name optional text file name available download table output generated data_long data long format? Default FALSE group_var variable name groups defined. Enter without quotation marks (e.g. ColName instead \"ColName\"). used wide data format.","code":""},{"path":"/reference/performance_eval_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"performance_eval_auto — performance_eval_auto","text":"performance evaluation results plots, formatted table, simple data frame","code":""},{"path":"/reference/performance_eval_auto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"performance_eval_auto — performance_eval_auto","text":"","code":"df <- data.frame(Index1 = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Index2 = c(rep(\"Positive\", 5), rep(\"Negative\", 35)), Index3 = c(rep(\"Positive\", 9), rep(\"Negative\", 31)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30)))  # All outputs eval_output <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = TRUE, table_output = TRUE, file_name = \"MyEvaluationExample\") eval_output$sen_plot   {\"x\":{\"data\":[{\"x\":[100,50,90],\"y\":[3,1,2],\"text\":[\"Test: Tgs1<br />Sensitivity: 100<br />SensLower: 72.25<br />SensUpper: 100.00\",\"Test: AFD<br />Sensitivity:  50<br />SensLower: 23.66<br />SensUpper:  76.34\",\"Test: SimpleDx<br />Sensitivity:  90<br />SensLower: 59.58<br />SensUpper:  98.21\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"opacity\":1,\"line\":{\"color\":\"transparent\"},\"error_x\":{\"array\":[0,26.340000000000003,8.2099999999999937],\"arrayminus\":[27.75,26.34,30.420000000000002],\"type\":\"data\",\"width\":0,\"symmetric\":false,\"color\":\"rgba(0,0,0,1)\"},\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"square\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":37.260273972602747,\"l\":72.32876712328769},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"tickvals\":[0,20,40,60,80,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Sensitivity (95% CI)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Test\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"18122c3a8f9d\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{},\"type\":\"scatter\"},\"1812217d5c63\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{}}},\"cur_data\":\"18122c3a8f9d\",\"visdat\":{\"18122c3a8f9d\":[\"function (y) \",\"x\"],\"1812217d5c63\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}eval_output$spe_plot  {\"x\":{\"data\":[{\"x\":[66.670000000000002,100,100],\"y\":[3,1,2],\"text\":[\"Test: Tgs1<br />Specificity:  66.67<br />SpeLower: 48.78<br />SpeUpper:  80.77\",\"Test: AFD<br />Specificity: 100.00<br />SpeLower: 88.65<br />SpeUpper: 100.00\",\"Test: SimpleDx<br />Specificity: 100.00<br />SpeLower: 88.65<br />SpeUpper: 100.00\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"opacity\":1,\"line\":{\"color\":\"transparent\"},\"error_x\":{\"array\":[14.099999999999994,0,0],\"arrayminus\":[17.890000000000001,11.350000000000009,11.350000000000009],\"type\":\"data\",\"width\":0,\"symmetric\":false,\"color\":\"rgba(0,0,0,1)\"},\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"square\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":37.260273972602747,\"l\":72.32876712328769},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"tickvals\":[0,20,40,60,80,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Specificity (95% CI)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Test\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"18127567f555\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{},\"type\":\"scatter\"},\"181268a5069a\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{}}},\"cur_data\":\"18127567f555\",\"visdat\":{\"18127567f555\":[\"function (y) \",\"x\"],\"181268a5069a\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}eval_output$table  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"Buttons\"],\"data\":[[\"Tgs1\",\"AFD\",\"SimpleDx\"],[\"40\",\"40\",\"40\"],[\"10\",\"5\",\"9\"],[\"10\",\"0\",\"0\"],[\"0\",\"5\",\"1\"],[\"20\",\"30\",\"30\"],[\"100\",\"50\",\"90\"],[\"[72.25-100.0]\",\"[23.66-76.34]\",\"[59.58-98.21]\"],[\"66.67\",\"100\",\"100\"],[\"[48.78-80.77]\",\"[88.65-100.0]\",\"[88.65-100.0]\"],[\"83.34\",\"75\",\"95\"],[\"[60.52-90.38]\",\"[56.15-88.17]\",\"[74.11-99.1]\"],[\"Inf\",\"Inf\",\"Inf\"],[\"[NaN-Inf]\",\"[NaN-Inf]\",\"[NaN-Inf]\"],[\"50\",\"100\",\"100\"],[\"[29.93-70.07]\",\"[56.55-100.0]\",\"[70.09-100.0]\"],[\"100\",\"85.71\",\"96.77\"],[\"[83.89-100.0]\",\"[70.62-93.74]\",\"[83.81-99.43]\"],[\"75\",\"87.5\",\"97.5\"],[\"[59.81-85.81]\",\"[73.89-94.54]\",\"[87.12-99.56]\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>N<\\/th>\\n      <th>TP<\\/th>\\n      <th>FP<\\/th>\\n      <th>FN<\\/th>\\n      <th>TN<\\/th>\\n      <th>Sensitivity<\\/th>\\n      <th>Sensitivity [95%CI]<\\/th>\\n      <th>Specificity<\\/th>\\n      <th>Specificity [95%CI]<\\/th>\\n      <th>Balanced Accuracy<\\/th>\\n      <th>B. Accuracy [95%CI]<\\/th>\\n      <th>DOR<\\/th>\\n      <th>DOR [95%CI]<\\/th>\\n      <th>PPV<\\/th>\\n      <th>PPV [95%CI]<\\/th>\\n      <th>NPV<\\/th>\\n      <th>NPV [95%CI]<\\/th>\\n      <th>Accuracy<\\/th>\\n      <th>Accuracy [95%CI]<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"Blfrtip\",\"buttons\":[{\"extend\":\"copy\",\"filename\":\"MyEvaluationExample\"},{\"extend\":\"csv\",\"filename\":\"MyEvaluationExample\"},{\"extend\":\"excel\",\"filename\":\"MyEvaluationExample\"},{\"extend\":\"pdf\",\"filename\":\"MyEvaluationExample\"}],\"lengthMenu\":[[10,-1],[\"10\",\"All\"]],\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"N\",\"targets\":1},{\"name\":\"TP\",\"targets\":2},{\"name\":\"FP\",\"targets\":3},{\"name\":\"FN\",\"targets\":4},{\"name\":\"TN\",\"targets\":5},{\"name\":\"Sensitivity\",\"targets\":6},{\"name\":\"Sensitivity [95%CI]\",\"targets\":7},{\"name\":\"Specificity\",\"targets\":8},{\"name\":\"Specificity [95%CI]\",\"targets\":9},{\"name\":\"Balanced Accuracy\",\"targets\":10},{\"name\":\"B. Accuracy [95%CI]\",\"targets\":11},{\"name\":\"DOR\",\"targets\":12},{\"name\":\"DOR [95%CI]\",\"targets\":13},{\"name\":\"PPV\",\"targets\":14},{\"name\":\"PPV [95%CI]\",\"targets\":15},{\"name\":\"NPV\",\"targets\":16},{\"name\":\"NPV [95%CI]\",\"targets\":17},{\"name\":\"Accuracy\",\"targets\":18},{\"name\":\"Accuracy [95%CI]\",\"targets\":19}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]} # Forest plot outputs eval_output_only_forest <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = TRUE, table_output = FALSE) eval_output_only_forest$sen_plot  {\"x\":{\"data\":[{\"x\":[100,50,90],\"y\":[3,1,2],\"text\":[\"Test: Tgs1<br />Sensitivity: 100<br />SensLower: 72.25<br />SensUpper: 100.00\",\"Test: AFD<br />Sensitivity:  50<br />SensLower: 23.66<br />SensUpper:  76.34\",\"Test: SimpleDx<br />Sensitivity:  90<br />SensLower: 59.58<br />SensUpper:  98.21\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"opacity\":1,\"line\":{\"color\":\"transparent\"},\"error_x\":{\"array\":[0,26.340000000000003,8.2099999999999937],\"arrayminus\":[27.75,26.34,30.420000000000002],\"type\":\"data\",\"width\":0,\"symmetric\":false,\"color\":\"rgba(0,0,0,1)\"},\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"square\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":37.260273972602747,\"l\":72.32876712328769},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"tickvals\":[0,20,40,60,80,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Sensitivity (95% CI)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Test\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"18127cbc074c\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{},\"type\":\"scatter\"},\"1812476aa1f4\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{}}},\"cur_data\":\"18127cbc074c\",\"visdat\":{\"18127cbc074c\":[\"function (y) \",\"x\"],\"1812476aa1f4\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}eval_output_only_forest$spe_plot  {\"x\":{\"data\":[{\"x\":[66.670000000000002,100,100],\"y\":[3,1,2],\"text\":[\"Test: Tgs1<br />Specificity:  66.67<br />SpeLower: 48.78<br />SpeUpper:  80.77\",\"Test: AFD<br />Specificity: 100.00<br />SpeLower: 88.65<br />SpeUpper: 100.00\",\"Test: SimpleDx<br />Specificity: 100.00<br />SpeLower: 88.65<br />SpeUpper: 100.00\"],\"type\":\"scatter\",\"mode\":\"lines+markers\",\"opacity\":1,\"line\":{\"color\":\"transparent\"},\"error_x\":{\"array\":[14.099999999999994,0,0],\"arrayminus\":[17.890000000000001,11.350000000000009,11.350000000000009],\"type\":\"data\",\"width\":0,\"symmetric\":false,\"color\":\"rgba(0,0,0,1)\"},\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":7.559055118110237,\"symbol\":\"square\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":23.305936073059364,\"r\":7.3059360730593621,\"b\":37.260273972602747,\"l\":72.32876712328769},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-5,105],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"tickvals\":[0,20,40,60,80,100],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"20\",\"40\",\"60\",\"80\",\"100\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Specificity (95% CI)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.40000000000000002,3.6000000000000001],\"tickmode\":\"array\",\"ticktext\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"tickvals\":[1,2,3],\"categoryorder\":\"array\",\"categoryarray\":[\"AFD\",\"SimpleDx\",\"Tgs1\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.66417600664176002,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":true,\"linecolor\":\"rgba(0,0,0,1)\",\"linewidth\":0.66417600664176002,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Test\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"18126e9de01\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{},\"type\":\"scatter\"},\"1812133b381\":{\"x\":{},\"y\":{},\"ymin\":{},\"ymax\":{}}},\"cur_data\":\"18126e9de01\",\"visdat\":{\"18126e9de01\":[\"function (y) \",\"x\"],\"1812133b381\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}eval_output_only_forest$table #NULL #> NULL  # A simple data frame output where the table is not formatted. This form is computer friendly. eval_output_simple_df <- performance_eval_auto(data_var = df, list_index = c(\"Index1\", \"Index2\", \"Index3\"), ref = \"Reference\", conf.level = 0.95, index_names = c(\"Tgs1\", \"AFD\", \"SimpleDx\"), labels = \"Test\", forest_plot = FALSE, table_output = FALSE)  eval_output_simple_df #>    N TP FP FN TN Sensitivity Specificity SensLower SensUpper SpeLower SpeUpper #> 1 40 10 10  0 20         100       66.67     72.25    100.00    48.78    80.77 #> 2 40  5  0  5 30          50      100.00     23.66     76.34    88.65   100.00 #> 3 40  9  0  1 30          90      100.00     59.58     98.21    88.65   100.00 #>   Balanced_Accuracy BAlower BAupper DOR DORUpper DORLower PPV PPVLower PPVUpper #> 1             83.34   60.52   90.38 Inf      Inf      NaN  50    29.93    70.07 #> 2             75.00   56.15   88.17 Inf      Inf      NaN 100    56.55   100.00 #> 3             95.00   74.11   99.10 Inf      Inf      NaN 100    70.09   100.00 #>      NPV NPVLower NPVUpper Accuracy ACCLower ACCUpper     Test #> 1 100.00    83.89   100.00     75.0    59.81    85.81     Tgs1 #> 2  85.71    70.62    93.74     87.5    73.89    94.54      AFD #> 3  96.77    83.81    99.43     97.5    87.12    99.56 SimpleDx   # Performance Evaluation by Groups data(my_dataset) head(my_dataset) #>         ID Test_Name   Result  RefTest #> 1 01STUDID       ABC Negative Negative #> 2 01STUDID       DST Negative Negative #> 3 01STUDID       HCG Negative Negative #> 4 01STUDID      LLJK Negative Negative #> 5 01STUDID      ddfs Negative Negative #> 6 01STUDID Weird Lab Negative Negative eval_output <- performance_eval_auto(data_var = my_dataset, list_index = \"Result\", ref = \"RefTest\", conf.level = 0.95, labels = \"Test\", forest_plot = FALSE, table_output = TRUE, file_name = \"MyEvaluationExample\", data_long = TRUE, group_var = Test_Name )"},{"path":"/reference/sens_spe.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity and specificity (Table Display) — sens_spe","title":"Sensitivity and specificity (Table Display) — sens_spe","text":"Calculate sensitivity specificity confidence intervals data frame contains results index reference test. used displaying result table.","code":""},{"path":"/reference/sens_spe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity and specificity (Table Display) — sens_spe","text":"","code":"sens_spe(data_var, index, ref, conf.level = 0.95)"},{"path":"/reference/sens_spe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity and specificity (Table Display) — sens_spe","text":"data_var Data table containing test results index index test \"Negative\" \"Positive\" results ref reference test \"Negative\" \"Positive\" results conf.level confidence level, 1-alpha – default 95%","code":""},{"path":"/reference/sens_spe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sensitivity and specificity (Table Display) — sens_spe","text":"data table TP/FP/TN/FN, sensitivity, specificity confidence intervals","code":""},{"path":"/reference/sens_spe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sensitivity and specificity (Table Display) — sens_spe","text":"","code":"df <- data.frame(Index = c(rep(\"Positive\", 5), rep(\"Negative\", 30), rep(\"Positive\", 5)), Reference = c(rep(\"Positive\", 10), rep(\"Negative\", 30))) sens_spe(data_var = df, index = \"Index\", ref = \"Reference\", conf.level = 0.95) #>    N TP FP FN TN Sensitivity Sensitivity [95%CI] Specificity #> 1 40  5  5  5 25          50       [23.66-76.34]       83.33 #>   Specificity [95%CI] Balanced Accuracy B. Accuracy [95%CI] DOR DOR [95%CI] PPV #> 1       [66.44-92.66]             66.66        [45.05-84.5]   5 [4.76-5.26]  50 #>     PPV [95%CI]   NPV   NPV [95%CI] Accuracy Accuracy [95%CI] #> 1 [23.66-76.34] 83.33 [66.44-92.66]       75    [59.81-85.81]"},{"path":"/reference/sens_spe_for_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity and specificity (for forest plots) — sens_spe_for_forest","title":"Sensitivity and specificity (for forest plots) — sens_spe_for_forest","text":"Calculate sensitivity specificity confidence intervals data frame contains results index reference test. used displaying result forest plot.","code":""},{"path":"/reference/sens_spe_for_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity and specificity (for forest plots) — sens_spe_for_forest","text":"","code":"sens_spe_for_forest(data_var, index, ref, conf.level = 0.95)"},{"path":"/reference/sens_spe_for_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity and specificity (for forest plots) — sens_spe_for_forest","text":"data_var Data table containing test results index index test \"Negative\" \"Positive\" results ref reference test \"Negative\" \"Positive\" results conf.level confidence level, 1-alpha – default 95%","code":""},{"path":"/reference/sens_spe_for_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sensitivity and specificity (for forest plots) — sens_spe_for_forest","text":"data table TP/FP/TN/FN, sensitivity, specificity confidence intervals","code":""},{"path":"/reference/sens_spe_for_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sensitivity and specificity (for forest plots) — sens_spe_for_forest","text":"","code":"library(forestplot) #> Loading required package: grid #> Loading required package: checkmate #> Loading required package: abind library(dplyr) df <- data.frame(Index = c(rep(\"Positive\", 20), rep(\"Negative\", 20)), Reference = c(rep(\"Positive\", 30), rep(\"Negative\", 10))) forest_data <- cbind(Test = \"Index\", sens_spe_for_forest(data_var = df, index = \"Index\", ref = \"Reference\", conf.level = 0.95)) forest_data %>% forestplot(mean = Sensitivity,                            lower = SensLower,                            upper = SensUpper,                            labeltext = Test,                           title = \"Sensitivity\",                           zero = NA,                           xticks = c( 0, 20, 40, 60, 80, 100),                           txt_gp = fpTxtGp(ticks=gpar(cex=1)),                           boxsize = .1                           )"},{"path":"/reference/temperature_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Regroup axillary temperature values — temperature_groups","title":"Regroup axillary temperature values — temperature_groups","text":"Creates new categorical variable based body temperature.","code":""},{"path":"/reference/temperature_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regroup axillary temperature values — temperature_groups","text":"","code":"temperature_groups(data.var, temperature)"},{"path":"/reference/temperature_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regroup axillary temperature values — temperature_groups","text":"data.var Data table temperature Variable containing body temperature Celsius","code":""},{"path":"/reference/temperature_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regroup axillary temperature values — temperature_groups","text":"Creates new column frame body temperature ranges","code":""},{"path":"/reference/temperature_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regroup axillary temperature values — temperature_groups","text":"","code":"df = data.frame(ID = c(1:20), Temperature = runif(20, 36, 42)) temperature_groups(data.var = df, temperature = \"Temperature\") #>    ID Temperature TEMP_CATEG #> 1   1    41.50596        ≥39 #> 2   2    41.83707        ≥39 #> 3   3    40.91449        ≥39 #> 4   4    41.41754        ≥39 #> 5   5    39.48820        ≥39 #> 6   6    40.63805        ≥39 #> 7   7    41.97074        ≥39 #> 8   8    40.26583        ≥39 #> 9   9    37.28966    37-37.9 #> 10 10    37.75055    37-37.9 #> 11 11    40.33056        ≥39 #> 12 12    41.19969        ≥39 #> 13 13    37.43072    37-37.9 #> 14 14    36.02698    36-36.9 #> 15 15    41.66110        ≥39 #> 16 16    38.62882    38-38.9 #> 17 17    40.50362        ≥39 #> 18 18    40.00689        ≥39 #> 19 19    38.44784    38-38.9 #> 20 20    38.10749    38-38.9"}]
